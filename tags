!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/root/prepush/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
$(EXEC)	Makefile	/^$(EXEC): $(OBJ) $/;"	t
%.o	Makefile	/^%.o: %.c $/;"	t
%.o	Makefile	/^%.o: %.s $/;"	t
0	.vscode/c_cpp_properties.json	/^                "${workspaceFolder}\/**",$/;"	s	array:configurations.0.includePath
0	.vscode/c_cpp_properties.json	/^                "_DEBUG",$/;"	s	array:configurations.0.defines
0	.vscode/c_cpp_properties.json	/^        {$/;"	o	array:configurations
1	.vscode/c_cpp_properties.json	/^                "UNICODE",$/;"	s	array:configurations.0.defines
1	.vscode/c_cpp_properties.json	/^                "include\/**",$/;"	s	array:configurations.0.includePath
2	.vscode/c_cpp_properties.json	/^                "_UNICODE"$/;"	s	array:configurations.0.defines
2	.vscode/c_cpp_properties.json	/^                "include"$/;"	s	array:configurations.0.includePath
AS	Makefile	/^AS = sudo \/home\/ubuntu\/opt\/cross\/bin\/i686-elf-as$/;"	m
ASFLAGS	Makefile	/^ASFLAGS =$/;"	m
CC	Makefile	/^CC = sudo \/home\/ubuntu\/opt\/cross\/bin\/i686-elf-gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -fno-builtin -fno-exceptions -fno-stack-protector -nostdlib -nodefaultlibs -ffreestandi/;"	m
CHECKSUM	boot.s	/^.set CHECKSUM,	-(MAGIC + FLAGS)$/;"	d
CURSOR_LOCATION_HIGH	include/io.h	/^#define CURSOR_LOCATION_HIGH /;"	d
CURSOR_LOCATION_LOW	include/io.h	/^#define CURSOR_LOCATION_LOW /;"	d
C_Cpp.errorSquiggles	.vscode/settings.json	/^    "C_Cpp.errorSquiggles": "disabled"$/;"	s
EMPTY_CHAR	include/screen.h	/^#define EMPTY_CHAR /;"	d
EMPTY_COLOR	include/screen.h	/^#define EMPTY_COLOR /;"	d
EMPTY_VGA	include/screen.h	/^#define EMPTY_VGA /;"	d
EXEC	Makefile	/^EXEC = .\/isodir\/boot\/myos.bin $/;"	m
FLAGS	boot.s	/^.set FLAGS,	ALIGN | MEMINFO$/;"	d
GDTEntry	include/gdt.h	/^struct GDTEntry$/;"	s
GDTPointer	include/gdt.h	/^struct GDTPointer$/;"	s
INC_DIR	Makefile	/^INC_DIR = -Iinclude$/;"	m
KERN_ERR	include/printk.h	/^#define KERN_ERR /;"	d
KERN_INFO	include/printk.h	/^#define KERN_INFO /;"	d
KFS_CMDS_H	include/cmds.h	/^#define KFS_CMDS_H$/;"	d
KFS_CURSOR_H	include/cursor.h	/^#define KFS_CURSOR_H$/;"	d
KFS_DATE_H	include/date.h	/^#define KFS_DATE_H$/;"	d
KFS_DRAW_H	include/draw.h	/^#define KFS_DRAW_H$/;"	d
KFS_GDT_H	include/gdt.h	/^#define KFS_GDT_H$/;"	d
KFS_IO_H	include/io.h	/^#define KFS_IO_H$/;"	d
KFS_KERNEL_H	include/kernel.h	/^#define KFS_KERNEL_H$/;"	d
KFS_KEYBOARD_H	include/keyboard.h	/^#define KFS_KEYBOARD_H$/;"	d
KFS_PRINTK_H	include/printk.h	/^#define KFS_PRINTK_H$/;"	d
KFS_SCREEN_H	include/screen.h	/^#define KFS_SCREEN_H$/;"	d
KFS_UTILS_H	include/utils.h	/^#define KFS_UTILS_H$/;"	d
LD	Makefile	/^LD = sudo \/home\/ubuntu\/opt\/cross\/bin\/i686-elf-gcc$/;"	m
LDFLAGS	Makefile	/^LDFLAGS = -T linker.ld -ffreestanding -O2 -nostdlib -lgcc -march=i386 -fno-builtin -fno-exceptio/;"	m
MAGIC	boot.s	/^.set MAGIC,	0x1BADB002$/;"	d
MEMINFO	boot.s	/^.set MEMINFO,	1<<1$/;"	d
OBJ	Makefile	/^OBJ = $(SRC_C:.c=.o) $(SRC_S:.s=.o) $/;"	m
PORT_CMOS_ADDRESS	include/io.h	/^#define PORT_CMOS_ADDRESS /;"	d
PORT_CMOS_DATA	include/io.h	/^#define PORT_CMOS_DATA /;"	d
PORT_CRTC_ADDRESS	include/io.h	/^#define PORT_CRTC_ADDRESS /;"	d
PORT_CRTC_DATA	include/io.h	/^#define PORT_CRTC_DATA /;"	d
PORT_PS2_DATA	include/io.h	/^#define PORT_PS2_DATA /;"	d
PORT_PS2_STATUS	include/io.h	/^#define PORT_PS2_STATUS /;"	d
PRESSED	src/keyboard.c	/^#define PRESSED /;"	d	file:
RELEASED	src/keyboard.c	/^#define RELEASED /;"	d	file:
SCODE_BACKSPACE	src/keyboard.c	/^#define SCODE_BACKSPACE /;"	d	file:
SCODE_CTRL_PRESSED	src/keyboard.c	/^#define SCODE_CTRL_PRESSED /;"	d	file:
SCODE_CTRL_RELEASED	src/keyboard.c	/^#define SCODE_CTRL_RELEASED /;"	d	file:
SCODE_ENTER	src/keyboard.c	/^#define SCODE_ENTER /;"	d	file:
SCODE_ESCAPE	src/keyboard.c	/^#define SCODE_ESCAPE /;"	d	file:
SCODE_SHIFT_PRESSED	src/keyboard.c	/^#define SCODE_SHIFT_PRESSED /;"	d	file:
SCODE_SHIFT_RELEASED	src/keyboard.c	/^#define SCODE_SHIFT_RELEASED /;"	d	file:
SCODE_TAB	src/keyboard.c	/^#define SCODE_TAB /;"	d	file:
SRC_C	Makefile	/^SRC_C = $(addprefix $(SRC_C_DIR)\/, $(SRC_C_LIST))$/;"	m
SRC_C_DIR	Makefile	/^SRC_C_DIR = src$/;"	m
SRC_C_LIST	Makefile	/^SRC_C_LIST = gdt.c \\$/;"	m
SRC_S	Makefile	/^SRC_S = boot.s gdt_load.s gdt_verify.s $/;"	m
VGA_COLOR_BLACK	include/screen.h	/^  VGA_COLOR_BLACK = 0,$/;"	e	enum:vga_color
VGA_COLOR_BLUE	include/screen.h	/^  VGA_COLOR_BLUE = 1,$/;"	e	enum:vga_color
VGA_COLOR_CYAN	include/screen.h	/^  VGA_COLOR_CYAN = 3,$/;"	e	enum:vga_color
VGA_COLOR_DARK_GREY	include/screen.h	/^  VGA_COLOR_DARK_GREY = 8,$/;"	e	enum:vga_color
VGA_COLOR_GREEN	include/screen.h	/^  VGA_COLOR_GREEN = 2,$/;"	e	enum:vga_color
VGA_COLOR_LIGHT_BLUE	include/screen.h	/^  VGA_COLOR_LIGHT_BLUE = 9,$/;"	e	enum:vga_color
VGA_COLOR_LIGHT_CYAN	include/screen.h	/^  VGA_COLOR_LIGHT_CYAN = 11,$/;"	e	enum:vga_color
VGA_COLOR_LIGHT_GREEN	include/screen.h	/^  VGA_COLOR_LIGHT_GREEN = 10,$/;"	e	enum:vga_color
VGA_COLOR_LIGHT_GREY	include/screen.h	/^  VGA_COLOR_LIGHT_GREY = 7,$/;"	e	enum:vga_color
VGA_COLOR_LIGHT_MAGENTA	include/screen.h	/^  VGA_COLOR_LIGHT_MAGENTA = 13,$/;"	e	enum:vga_color
VGA_COLOR_LIGHT_RED	include/screen.h	/^  VGA_COLOR_LIGHT_RED = 12,$/;"	e	enum:vga_color
VGA_COLOR_LIGHT_YELLOW	include/screen.h	/^  VGA_COLOR_LIGHT_YELLOW = 14,$/;"	e	enum:vga_color
VGA_COLOR_MAGENTA	include/screen.h	/^  VGA_COLOR_MAGENTA = 5,$/;"	e	enum:vga_color
VGA_COLOR_RED	include/screen.h	/^  VGA_COLOR_RED = 4,$/;"	e	enum:vga_color
VGA_COLOR_WHITE	include/screen.h	/^  VGA_COLOR_WHITE = 15,$/;"	e	enum:vga_color
VGA_COLOR_YELLOW	include/screen.h	/^  VGA_COLOR_YELLOW = 6,$/;"	e	enum:vga_color
VGA_HEIGHT	src/screen.c	/^const size_t VGA_HEIGHT = 25; \/\/ 25;$/;"	v	typeref:typename:const size_t
VGA_WIDTH	src/screen.c	/^const size_t VGA_WIDTH = 80;  \/\/ 80;$/;"	v	typeref:typename:const size_t
__exit	src/cmds.c	/^static inline void __exit(unsigned short port, unsigned short val)$/;"	f	typeref:typename:void	file:
_start	boot.s	/^_start:$/;"	l
access	include/gdt.h	/^    uint8_t access;      \/\/ Access flags$/;"	m	struct:GDTEntry	typeref:typename:uint8_t
all	Makefile	/^all: $(EXEC)$/;"	t
auto_scroll	src/screen.c	/^static void auto_scroll(void)$/;"	f	typeref:typename:void	file:
base	include/gdt.h	/^    uint32_t base;  \/\/ Address of the first GDT entry$/;"	m	struct:GDTPointer	typeref:typename:uint32_t
base_high	include/gdt.h	/^    uint8_t base_high;   \/\/ Last 8 bits of the base$/;"	m	struct:GDTEntry	typeref:typename:uint8_t
base_low	include/gdt.h	/^    uint16_t base_low;   \/\/ Lower 16 bits of the base$/;"	m	struct:GDTEntry	typeref:typename:uint16_t
base_middle	include/gdt.h	/^    uint8_t base_middle; \/\/ Next 8 bits of the base$/;"	m	struct:GDTEntry	typeref:typename:uint8_t
bcd_to_bin	src/date.c	/^static unsigned char bcd_to_bin(unsigned char bcd)$/;"	f	typeref:typename:unsigned char	file:
bufid	src/keyboard.c	/^uint8_t bufid = 0;$/;"	v	typeref:typename:uint8_t
cStandard	.vscode/c_cpp_properties.json	/^            "cStandard": "c17",$/;"	s	object:configurations.0
clean	Makefile	/^clean: $/;"	t
clear_input	src/keyboard.c	/^void clear_input(void) {$/;"	f	typeref:typename:void
cmd_clear	src/cmds.c	/^static void cmd_clear(void)$/;"	f	typeref:typename:void	file:
cmd_date	src/cmds.c	/^static void cmd_date(void)$/;"	f	typeref:typename:void	file:
cmd_exit	src/cmds.c	/^static void cmd_exit(void)$/;"	f	typeref:typename:void	file:
cmd_help	src/cmds.c	/^static void cmd_help(void)$/;"	f	typeref:typename:void	file:
cmd_uname	src/cmds.c	/^static void cmd_uname(void)$/;"	f	typeref:typename:void	file:
cmd_version	src/cmds.c	/^static void cmd_version(void)$/;"	f	typeref:typename:void	file:
cmd_whoami	src/cmds.c	/^static void cmd_whoami(void)$/;"	f	typeref:typename:void	file:
cmds.h	.vscode/settings.json	/^        "cmds.h": "c",$/;"	s	object:files.associations
configurations	.vscode/c_cpp_properties.json	/^    "configurations": [$/;"	a
contains	src/utils.c	/^int contains(char c, const char *str)$/;"	f	typeref:typename:int
cppStandard	.vscode/c_cpp_properties.json	/^            "cppStandard": "c++17",$/;"	s	object:configurations.0
ctrl_key_handler	src/keyboard.c	/^void ctrl_key_handler(char key)$/;"	f	typeref:typename:void
defines	.vscode/c_cpp_properties.json	/^            "defines": [$/;"	a	object:configurations.0
display_prompt	src/screen.c	/^void display_prompt(void)$/;"	f	typeref:typename:void
draw_42_logo	src/draw.c	/^void draw_42_logo()$/;"	f	typeref:typename:void
draw_dbg_cursor_pos	src/draw.c	/^void draw_dbg_cursor_pos(void)$/;"	f	typeref:typename:void
draw_dbg_input	src/draw.c	/^void draw_dbg_input(char *str)$/;"	f	typeref:typename:void
draw_dbg_scancode	src/draw.c	/^void draw_dbg_scancode(const uint8_t scancode)$/;"	f	typeref:typename:void
draw_guides	src/draw.c	/^void draw_guides()$/;"	f	typeref:typename:void
draw_reset_top_bar	src/draw.c	/^void draw_reset_top_bar()$/;"	f	typeref:typename:void
draw_tabs	src/draw.c	/^void draw_tabs()$/;"	f	typeref:typename:void
enter_protected_mode	src/kernel.c	/^void enter_protected_mode()$/;"	f	typeref:typename:void
fclean	Makefile	/^fclean: clean$/;"	t
files.associations	.vscode/settings.json	/^    "files.associations": {$/;"	o
flush	gdt_load.s	/^flush:$/;"	l
ft_delete_last_entry	src/keyboard.c	/^void ft_delete_last_entry(void)$/;"	f	typeref:typename:void
ft_put_entry_empty	src/screen.c	/^void ft_put_entry_empty(void)$/;"	f	typeref:typename:void
g_buffer	src/screen.c	/^uint16_t *g_buffer;$/;"	v	typeref:typename:uint16_t *
g_color	src/screen.c	/^uint8_t g_color[3];$/;"	v	typeref:typename:uint8_t[3]
g_current_screen	src/screen.c	/^uint8_t g_current_screen = 0;$/;"	v	typeref:typename:uint8_t
g_screens	src/screen.c	/^uint16_t g_screens[3][2000];$/;"	v	typeref:typename:uint16_t[3][2000]
g_x	src/screen.c	/^size_t g_x[3] = {0, 0, 0};$/;"	v	typeref:typename:size_t[3]
g_y	src/screen.c	/^size_t g_y[3] = {3, 3, 3};$/;"	v	typeref:typename:size_t[3]
gdt	src/gdt.c	/^struct GDTEntry gdt[3] __attribute__((aligned(8))) = {0}; \/\/ Définir la GDT à l'adresse voul/;"	v	typeref:struct:GDTEntry[3]
gdt_ptr	src/gdt.c	/^struct GDTPointer gdt_ptr = {sizeof(gdt) - 1, (uint32_t)&gdt};$/;"	v	typeref:struct:GDTPointer
gdt_verify	gdt_verify.s	/^gdt_verify:$/;"	l
get_cursor_pos	src/cursor.c	/^uint16_t get_cursor_pos(void)$/;"	f	typeref:typename:uint16_t
get_cursor_x	src/cursor.c	/^uint16_t get_cursor_x(const uint16_t pos)$/;"	f	typeref:typename:uint16_t
get_cursor_y	src/cursor.c	/^uint16_t get_cursor_y(const uint16_t pos)$/;"	f	typeref:typename:uint16_t
get_gc_pos	src/screen.c	/^static inline int get_gc_pos(void)$/;"	f	typeref:typename:int	file:
get_system_date	src/date.c	/^static void get_system_date(int *day, int *month, int *year)$/;"	f	typeref:typename:void	file:
get_system_time	src/date.c	/^static void get_system_time(int *hour, int *minute, int *second)$/;"	f	typeref:typename:void	file:
goto_next_screen	src/keyboard.c	/^void goto_next_screen(void)$/;"	f	typeref:typename:void
granularity	include/gdt.h	/^    uint8_t granularity; \/\/ Granularity and higher 4 bits of limit$/;"	m	struct:GDTEntry	typeref:typename:uint8_t
handle_scancode	src/keyboard.c	/^void handle_scancode(void)$/;"	f	typeref:typename:void
inb	src/io.c	/^inline uint8_t inb(uint16_t port)$/;"	f	typeref:typename:uint8_t
includePath	.vscode/c_cpp_properties.json	/^            "includePath": [$/;"	a	object:configurations.0
init_gdt	src/gdt.c	/^void init_gdt()$/;"	f	typeref:typename:void
init_screen	src/screen.c	/^void init_screen(void)$/;"	f	typeref:typename:void
input	src/keyboard.c	/^char input[3][128] = { 0 };$/;"	v	typeref:typename:char[3][128]
intelliSenseMode	.vscode/c_cpp_properties.json	/^            "intelliSenseMode": "windows-msvc-x64"$/;"	s	object:configurations.0
is_ps2_data_ready	src/io.c	/^uint8_t is_ps2_data_ready(void)$/;"	f	typeref:typename:uint8_t
isprint	src/utils.c	/^bool isprint(const char c)$/;"	f	typeref:typename:bool
itoa	src/printk.c	/^static char *itoa(int num, char *str, int base)$/;"	f	typeref:typename:char *	file:
kernel_main	src/kernel.c	/^void kernel_main(void)$/;"	f	typeref:typename:void
keyboard.h	.vscode/settings.json	/^        "keyboard.h": "c",$/;"	s	object:files.associations
limit	include/gdt.h	/^    uint16_t limit; \/\/ Size of the GDT (bytes - 1)$/;"	m	struct:GDTPointer	typeref:typename:uint16_t
limit_low	include/gdt.h	/^    uint16_t limit_low;  \/\/ Lower 16 bits of the limit$/;"	m	struct:GDTEntry	typeref:typename:uint16_t
load_gdt	gdt_load.s	/^load_gdt:$/;"	l
move_cursor	src/cursor.c	/^void move_cursor(const int x, const int y)$/;"	f	typeref:typename:void
name	.vscode/c_cpp_properties.json	/^            "name": "Win32",$/;"	s	object:configurations.0
newline	src/screen.c	/^void newline(void)$/;"	f	typeref:typename:void
outb	src/io.c	/^inline void outb(uint16_t port, uint8_t value)$/;"	f	typeref:typename:void
parse_commands	src/cmds.c	/^void parse_commands(const char *input)$/;"	f	typeref:typename:void
print_2digits	src/date.c	/^static void print_2digits(int value)$/;"	f	typeref:typename:void	file:
print_4digits	src/date.c	/^static void print_4digits(int value)$/;"	f	typeref:typename:void	file:
print_date	src/date.c	/^void print_date(void)$/;"	f	typeref:typename:void
printk	src/printk.c	/^int printk(const char *fmt, ...)$/;"	f	typeref:typename:int
putchar	src/screen.c	/^void putchar(const char c)$/;"	f	typeref:typename:void
putchar_at	src/screen.c	/^void putchar_at(const char c, uint8_t color, size_t x, size_t y)$/;"	f	typeref:typename:void
putcoord	src/utils.c	/^void putcoord(const int cx, const int cy, uint8_t color, const int x, const int y)$/;"	f	typeref:typename:void
puthex_at	src/utils.c	/^void puthex_at(const uint8_t scancode, const int x, const int y)$/;"	f	typeref:typename:void
putnbr_at	src/utils.c	/^void	putnbr_at(int n, uint8_t color, int x, int y)$/;"	f	typeref:typename:void
putstr	src/utils.c	/^void putstr(const char *str)$/;"	f	typeref:typename:void
putstr_at	src/screen.c	/^void putstr_at(const char *str, uint8_t color, size_t ox, size_t y)$/;"	f	typeref:typename:void
read_cmos	src/io.c	/^unsigned char read_cmos(unsigned char value)$/;"	f	typeref:typename:unsigned char
read_ps2_scancode	src/io.c	/^uint8_t read_ps2_scancode(void)$/;"	f	typeref:typename:uint8_t
recolor_cursor	src/screen.c	/^void recolor_cursor(void)$/;"	f	typeref:typename:void
recolor_screen_at	src/screen.c	/^void recolor_screen_at(uint16_t start_pos) {$/;"	f	typeref:typename:void
remove_logo	src/screen.c	/^void remove_logo(void)$/;"	f	typeref:typename:void
scancode_table	include/keyboard.h	/^static const char scancode_table[][2] = {$/;"	v	typeref:typename:const char[][2]
screen.h	.vscode/settings.json	/^        "screen.h": "c"$/;"	s	object:files.associations
screen_color	src/screen.c	/^void screen_color(enum vga_color fg, enum vga_color bg)$/;"	f	typeref:typename:void
screen_green	src/screen.c	/^void screen_green(void)$/;"	f	typeref:typename:void
screen_magenta	src/screen.c	/^void screen_magenta(void)$/;"	f	typeref:typename:void
screen_yellow	src/screen.c	/^void screen_yellow(void)$/;"	f	typeref:typename:void
set_gdt_entry	src/gdt.c	/^void set_gdt_entry(int index, uint32_t base, uint32_t limit, uint8_t access, uint8_t granularity/;"	f	typeref:typename:void
set_vga_text_mode	src/screen.c	/^static void set_vga_text_mode(const size_t width, const size_t height)$/;"	f	typeref:typename:void	file:
stack_bottom	boot.s	/^stack_bottom:$/;"	l
stack_top	boot.s	/^stack_top:$/;"	l
start	Makefile	/^start:$/;"	t
strcmp	src/utils.c	/^int strcmp(const char *s1, const char *s2)$/;"	f	typeref:typename:int
strlen	src/utils.c	/^size_t strlen(const char *str)$/;"	f	typeref:typename:size_t
test_gdt_access	src/kernel.c	/^void test_gdt_access()$/;"	f	typeref:typename:void
test_gdt_segments	src/kernel.c	/^void test_gdt_segments()$/;"	f	typeref:typename:void
version	.vscode/c_cpp_properties.json	/^    "version": 4$/;"	n
vga_color	include/screen.h	/^enum vga_color$/;"	g
vga_entry	src/screen.c	/^static inline uint16_t vga_entry(unsigned char uc, uint8_t color)$/;"	f	typeref:typename:uint16_t	file:
vga_entry_color	src/screen.c	/^uint8_t vga_entry_color(enum vga_color fg, enum vga_color bg)$/;"	f	typeref:typename:uint8_t
vsprintf	src/printk.c	/^static int vsprintf(char *buf, const char *fmt, va_list args)$/;"	f	typeref:typename:int	file:
windowsSdkVersion	.vscode/c_cpp_properties.json	/^            "windowsSdkVersion": "10.0.26100.0",$/;"	s	object:configurations.0
