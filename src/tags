!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/root/sharedd/KFS/src/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
VGA_HEIGHT	screen.c	/^const size_t VGA_HEIGHT = 25; \/\/ 25;$/;"	v	typeref:typename:const size_t
VGA_WIDTH	screen.c	/^const size_t VGA_WIDTH = 80;  \/\/ 80;$/;"	v	typeref:typename:const size_t
actualize_screen	kernel.c	/^void actualize_screen(void)$/;"	f	typeref:typename:void
auto_scroll	screen.c	/^static void auto_scroll(void)$/;"	f	typeref:typename:void	file:
enter_protected_mode	kernel.c	/^void enter_protected_mode()$/;"	f	typeref:typename:void
ft_delete_last_entry	screen.c	/^void ft_delete_last_entry(void)$/;"	f	typeref:typename:void
ft_put_entry	screen.c	/^void ft_put_entry(char c)$/;"	f	typeref:typename:void
ft_put_entry_at	screen.c	/^void ft_put_entry_at(char c, uint8_t color, size_t x, size_t y)$/;"	f	typeref:typename:void
ft_putstr	screen.c	/^static void ft_putstr(const char *data)$/;"	f	typeref:typename:void	file:
ft_strlen	screen.c	/^static size_t ft_strlen(const char *str)$/;"	f	typeref:typename:size_t	file:
ft_write	screen.c	/^static void ft_write(const char *data, size_t size)$/;"	f	typeref:typename:void	file:
g_buffer	screen.c	/^uint16_t *g_buffer;$/;"	v	typeref:typename:uint16_t *
g_color	screen.c	/^uint8_t g_color;$/;"	v	typeref:typename:uint8_t
g_current_screen	screen.c	/^uint8_t g_current_screen = 0;$/;"	v	typeref:typename:uint8_t
g_screens	screen.c	/^uint16_t g_screens[3][2000];$/;"	v	typeref:typename:uint16_t[3][2000]
g_x	screen.c	/^size_t g_x[3] = {0, 0, 0};$/;"	v	typeref:typename:size_t[3]
g_y	screen.c	/^size_t g_y[3] = {0, 0, 0};$/;"	v	typeref:typename:size_t[3]
gdt	gdt.c	/^struct GDTEntry gdt[3] __attribute__((aligned(8))) = {0}; \/\/ Définir la GDT à l'adresse voul/;"	v	typeref:struct:GDTEntry[3]
gdt_ptr	gdt.c	/^struct GDTPointer gdt_ptr = {sizeof(gdt) - 1, (uint32_t)&gdt};$/;"	v	typeref:struct:GDTPointer
inb	io.c	/^uint8_t inb(uint16_t port)$/;"	f	typeref:typename:uint8_t
init_gdt	gdt.c	/^void init_gdt()$/;"	f	typeref:typename:void
is_ps2_data_ready	io.c	/^uint8_t is_ps2_data_ready(void)$/;"	f	typeref:typename:uint8_t
itoa	printk.c	/^static char *itoa(int num, char *str, int base)$/;"	f	typeref:typename:char *	file:
kernel_main	kernel.c	/^void kernel_main(void)$/;"	f	typeref:typename:void
newline	screen.c	/^void newline(char c)$/;"	f	typeref:typename:void
outb	io.c	/^void outb(uint16_t port, uint8_t value)$/;"	f	typeref:typename:void
print_scancode	keyboard.c	/^static bool print_scancode(uint8_t scancode)$/;"	f	typeref:typename:bool	file:
print_scancode_hexa	keyboard.c	/^static void print_scancode_hexa(uint8_t scancode)$/;"	f	typeref:typename:void	file:
printk	printk.c	/^int printk(const char *fmt, ...)$/;"	f	typeref:typename:int
read_keyboard	keyboard.c	/^bool read_keyboard(void)$/;"	f	typeref:typename:bool
read_ps2_scancode	io.c	/^uint8_t read_ps2_scancode(void)$/;"	f	typeref:typename:uint8_t
recolor_screen	screen.c	/^void recolor_screen(void) {$/;"	f	typeref:typename:void
scancode_table	keyboard.c	/^static const char scancode_table[][2] = {$/;"	v	typeref:typename:const char[][2]	file:
screen_color	screen.c	/^void screen_color(enum vga_color fg, enum vga_color bg)$/;"	f	typeref:typename:void
screen_green	screen.c	/^void screen_green(void)$/;"	f	typeref:typename:void
screen_init	screen.c	/^void screen_init(void)$/;"	f	typeref:typename:void
screen_magenta	screen.c	/^void screen_magenta(void)$/;"	f	typeref:typename:void
screen_putchar	screen.c	/^void screen_putchar(char c)$/;"	f	typeref:typename:void
screen_putstr_at	screen.c	/^void screen_putstr_at(const char *str, uint8_t color, size_t ox, size_t y)$/;"	f	typeref:typename:void
screen_yellow	screen.c	/^void screen_yellow(void)$/;"	f	typeref:typename:void
set_gdt_entry	gdt.c	/^void set_gdt_entry(int index, uint32_t base, uint32_t limit, uint8_t access, uint8_t granularity/;"	f	typeref:typename:void
set_vga_text_mode	screen.c	/^static void set_vga_text_mode(const size_t width, const size_t height)$/;"	f	typeref:typename:void	file:
draw_42	draw.c	/^void draw_42()$/;"	f	typeref:typename:void
draw_guides	draw.c	/^void draw_guides()$/;"	f	typeref:typename:void
test_gdt_access	kernel.c	/^void test_gdt_access()$/;"	f	typeref:typename:void
test_gdt_segments	kernel.c	/^void test_gdt_segments()$/;"	f	typeref:typename:void
vga_entry	screen.c	/^static inline uint16_t vga_entry(unsigned char uc, uint8_t color)$/;"	f	typeref:typename:uint16_t	file:
vga_entry_color	screen.c	/^static inline uint8_t vga_entry_color(enum vga_color fg, enum vga_color bg)$/;"	f	typeref:typename:uint8_t	file:
vsprintf	printk.c	/^static int vsprintf(char *buf, const char *fmt, va_list args)$/;"	f	typeref:typename:int	file:
